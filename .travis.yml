# This is the complex Travis configuration, which is intended for use
# on open source libraries which need compatibility across multiple GHC
# versions, must work with cabal-install, and should be
# cross-platform. For more information and other options, see:
#
# https://docs.haskellstack.org/en/stable/travis_ci/
#
# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: false

# Choose a lightweight base image; we provide our own build tools.
language: c

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $HOME/.stack-work

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis
  #- env: BUILD=cabal GHCVER=8.0.2 CABALVER=1.24 HAPPYVER=1.19.5 ALEXVER=3.1.7
  #  compiler: " GHC 8.0.2"
  #  addons: {apt: {packages: [libfcgi-dev,cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  #- env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  #  compiler: " GHC HEAD"
  #  addons: {apt: {packages: [libfcgi-dev,cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS=""
    compiler: " stack default"

  - env: BUILD=stack ARGS="--resolver lts-7"
    compiler: " stack 8.0.1"

  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: " stack 8.0.2"

  - env: BUILD=stack ARGS="--resolver lts-10"
    compiler: " stack 8.2.2"

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: " stack nightly"

  # Build on OS X in addition to Linux
  - env: BUILD=stack ARGS=""
    compiler: " stack default osx"
    os: osx

  # Travis includes an OS X which is incompatible with GHC 7.8.4
  #- env: BUILD=stack ARGS="--resolver lts-2"
  #  compiler: " stack 7.8.4 osx"
  #  os: osx

  - env: BUILD=stack ARGS="--resolver lts-7"
    compiler: " stack 8.0.1 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-9"
    compiler: " stack 8.0.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver lts-10"
    compiler: " stack 8.2.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: " stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--resolver nightly"

addons:
  apt:
    sources:
    - sourceline: ppa:hvr/z3
    packages:
    - libfcgi-dev
    - libgmp-dev
    - z3
before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC
- export PATH=${HOME}/.local/bin:${PATH}
- mkdir -p ${HOME}/.local/bin
- |
  set -ex
  case "$TRAVIS_OS_NAME" in
    linux)
      travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
      ;;
    osx)
      brew install z3
      travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
      ;;
  esac
  set +ex

install:
- stack --version
- git clone --recursive https://github.com/ucsd-progsys/liquidhaskell 2> /dev/null
- cd liquidhaskell
- git fetch
- git pull
- git submodule update --recursive
- stack install
- cd -
- travis_retry stack --no-terminal --install-ghc $ARGS install --bench --only-dependencies

script:
- stack --no-terminal $ARGS test --bench --no-run-benchmarks
